;
; Subroutines.s12

MotorStart:
		LDAA	DCShadow
		BITA	#%00000100
		BNE	MotorStart_end
		LDAB	#$2
		JSR	Outone
		JSR	DELAY
		JSR	DELAY
		JSR	DELAY
		JSR	DELAY
MotorStart_end: RTS

MotorStop:
		LDAB	#$2
		JSR	Outzero
		RTS
DrillDown:	
		LDAB	#$3
		JSR	Outone
		RTS
		
DrillUp:	
		LDAB	#$3
		JSR	Outzero
		JSR	DELAY
		RTS

Alarm:
		BITB	#$FF
		BEQ	Alarm_end
Alarm_loop:	PSHB			; Börjar larm loopen sparar B
		LDAB	#$4
		JSR	Outone		; Sätter igång larmet
		JSR	DELAY
		JSR	DELAY		; Chillar
		JSR	Outzero		; Stänger av
		PULB			; Laddar tillbaks B (antal larm sign)
		DECB			; N = N-1
		BITB  	#$FF		; Om 0
		BEQ	Alarm_end	; Hoppa
		JSR	DELAY
		JMP	Alarm_loop		
Alarm_end:	RTS

Step:		LDAA	DrillStatus
		BITA	#$2
		BEQ	Step_no_step
		LDAB	#$1		; Medurs
		JSR	Outone		
		LDAB	#$0
		JSR	Outzero		; 0
		JSR	DELAY		; Delay
		LDAB	#$0
		JSR	Outone		; 1
		LDAB	#$1
		RTS			; Assume B still #$1 from Outone
Step_no_step:	LDAB 	#$2
		JSR	Alarm
		LDAB	#$0
		RTS
; Läser kopian av borrmaskinens styrord på DCShadow
; Nollställer en av bitarna (ges av B) skriver det nya till
; DrillControl samt till DCShadow
; Om B > 7 ska inget ske.
; Ex. anrop:
;	LDAB #bitnummer (ex #%00001000)
;	JSR  Outzero
Outzero:	BITB	#$F8 ; Kollar om B > 7
		BNE	Outzero_end ; Z=0, B > 7, gör inget
		LDX	#tabell
		LDAA	B,X
		COMA	
		ANDA	DCShadow
		STAA	DrillControl
		STAA	DCShadow
Outzero_end:	RTS

; Samma som innan fast ge ett ist.
Outone:		BITB	#$F8 ; Kollar om B > 7
		BNE	Outone_end ; Z=0, B > 7, gör inget
		LDX	#tabell
		LDAA	B,X
		ORAA	DCShadow
		STAA	DrillControl
		STAA	DCShadow
Outone_end:	RTS

tabell:		FCB	%00000001,%00000010,%00000100,%00001000,%00010000,%00100000,%01000000,%10000000