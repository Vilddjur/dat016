;
; Subroutines.s12

MotorStart:
		LDAA	DCShadow
		BITA	#%00000100
		BNE	MotorStart_end
		LDAB	#$2
		JSR	Outone
		JSR	DELAY
		JSR	DELAY
		JSR	DELAY
		JSR	DELAY
MotorStart_end: RTS

MotorStop:
		LDAB	#$2
		JSR	Outzero
		RTS
DrillDown:	
		LDAB	#$3
		JSR	Outone
		RTS
		
DrillUp:	
		LDAB	#$3
		JSR	Outzero
		JSR	DELAY
		RTS

Alarm:
		BITB	#$FF
		BEQ	Alarm_end
Alarm_loop:	PSHB			; Börjar larm loopen sparar B
		LDAB	#$4
		JSR	Outone		; Sätter igång larmet
		JSR	DELAY
		JSR	DELAY		; Chillar
		JSR	Outzero		; Stänger av
		PULB			; Laddar tillbaks B (antal larm sign)
		DECB			; N = N-1
		BITB  	#$FF		; Om 0
		BEQ	Alarm_end	; Hoppa
		JSR	DELAY
		JMP	Alarm_loop		
Alarm_end:	RTS

Step:		LDAA	DrillStatus
		BITA	#$2
		BEQ	Step_no_step
		LDAB	#$1		; Medurs
		JSR	Outone		
		LDAB	#$0
		JSR	Outzero		; 0
		JSR	DELAY		; Delay
		LDAB	#$0
		JSR	Outone		; 1
		JSR	DELAY
		LDAB	#$1
		RTS	
Step_no_step:	LDAB 	#$2
		JSR	Alarm
		LDAB	#$0
		RTS
		
		; Funkar ej för hål som redan finns(bugg?)
DrillDownTest:
		LDAA	#$14		; Retry 20(decimal) times
DrillDownTest_loop:
		LDAB	DrillStatus
		BITB	#$4
		BNE	DrillDownTest_return_down	; Borren nere
		JSR	DELAY
		DECA
		BITA	#$FF		; Check if 0
		BNE	DrillDownTest_loop	; If not zero loop
		LDAB	#$2
		JSR	Alarm
		LDAB	#$0
		RTS
DrillDownTest_return_down:
		LDAB	#$1
		RTS
		
DrillHole:
		JSR	DrillDown
		JSR	DrillDownTest
		PSHB
		JSR	DrillUp
		PULB
		RTS
		
RefPos:		
RefPos_loop:	LDAA	DrillStatus
		BITA	#$1
		BNE	RefPos_done
		JSR	Step
		BITB	#$FF
		BNE	RefPos_loop	; Not zero -> loop
		RTS			; B=0 error
RefPos_done:	
		LDAB	#$1
		RTS
		
Nstep:		
Nstep_loop:	BITB	#$FF		
		BEQ	Nstep_ret	; If zero dont continue
		DECB
		PSHB			; Push N
		JSR	Step
		BITB	#$FF		
		BNE	Nstep_pull	; If not zero loop
		RTS
Nstep_pull:	PULB			; Pull b and loop
		BRA	Nstep_loop
Nstep_ret:	LDAB	#$1
		RTS
		
DoAuto:		
		JSR	RefPos
		BITB	#$FF		
		BEQ	DoAuto_ret	; If Zero ret
		JSR	MotorStart
		LDAA	#$0
DoAuto_loop:	LDAB	A,X
		INCA
		PSHB
		CMPB	#$FF
		BEQ	DoAuto_ret	; If FF ret
		PULB
		JSR	Nstep		; Step B times
		BITB	#$FF
		BEQ	DoAuto_ret	; IF zero return
		JSR	DrillHole
		BITB	#$FF
		BEQ	DoAuto_ret	; IF zero return
		BRA	DoAuto_loop	; else loop
DoAuto_ret:	JSR	MotorStop
		RTS
; Läser kopian av borrmaskinens styrord på DCShadow
; Nollställer en av bitarna (ges av B) skriver det nya till
; DrillControl samt till DCShadow
; Om B > 7 ska inget ske.
; Ex. anrop:
;	LDAB #bitnummer (ex #%00001000)
;	JSR  Outzero
Outzero:	BITB	#$F8 ; Kollar om B > 7
		BNE	Outzero_end ; Z=0, B > 7, gör inget
		LDX	#tabell
		LDAA	B,X
		COMA	
		ANDA	DCShadow
		STAA	DrillControl
		STAA	DCShadow
Outzero_end:	RTS

; Samma som innan fast ge ett ist.
Outone:		BITB	#$F8 ; Kollar om B > 7
		BNE	Outone_end ; Z=0, B > 7, gör inget
		LDX	#tabell
		LDAA	B,X
		ORAA	DCShadow
		STAA	DrillControl
		STAA	DCShadow
Outone_end:	RTS

tabell:		FCB	%00000001,%00000010,%00000100,%00001000,%00010000,%00100000,%01000000,%10000000